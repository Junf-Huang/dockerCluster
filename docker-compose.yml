version: '3'
services:

  nginx:
    image: nginx
    container_name: nginx1
    volumes:
      #- ./bookStore/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      #- ./bookStore/nginx/nginx.d:/etc/nginx/nginx.d:ro
      #- ./bookStore/nginx/html:/usr/share/nginx/html:ro
      - nginx-conf:/etc/nginx/nginx
      - nginx-html:/usr/share/nginx/html
    ports:
      - "80:80"     #http
      - "443:443"   #https
    networks: 
      - network1
    # docker-compose up 会忽略 deploy 内容
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        # 指定在服务器 manager 上启动
        constraints:
          - node.hostname==Arch
      resources:
        limits:
          # 需要限制所有服务的CPU使用。这样可以防止单个容器占用主机的所有的CPU资源
          cpus: "0.1"
          memory: 50M 

  web:  #自定义
    build: ./bookStore
    image: junf/bookstore   #镜像名字
    # container_name: bookstore
    ports:
     - "8090:8080"
    environment:
      MYSQL_HOST: mgr1:3306
      MYSQL_DATABASE: bookstore
      MYSQL_USER: hjj   
      MYSQL_PASSWORD: hjj  
    depends_on:   #决定镜像生成容器的启动顺序
      - db
      #- nginx
    #Setting the timeout value to 0 will disable the timeout;
    #If you wish to execute the subcommand only if the service is up, add the --strict argument. 
    command: ["./wait-for-it.sh", "--timeout=0", "mgr1:3306", "--strict", "--", "java", "-jar", "/app.jar"]
    networks: 
      - network1
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
      update_config:
        delay: 5s
      placement:
        constraints:
          - node.hostname==Arch

  db:
    image: mysql
    container_name: mgr1
    environment:
      MYSQL_ROOT_PASSWORD: root #root管理员用户密码
      MYSQL_DATABASE: one   #创建数据库并赋权
      MYSQL_USER: junf   #创建junf用户
      MYSQL_PASSWORD: junf  #设置junf用户的密码
    networks: 
      - network1
    deploy:
      placement:
        constraints:
          - node.hostname==Arch
#    volumes:
#      - ./bookStore/mysql/db:/var/lib/mysql  
#      - ./bookStore/mysql/conf:/etc/mysql/conf.d

networks:
  network1:
    driver: overlay

volumes:
  nginx-conf: 
  nginx-html:

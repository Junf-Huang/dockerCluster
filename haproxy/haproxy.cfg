# vim /usr/local/etc/haproxy/haproxy.cfg

global
    log         127.0.0.1 local2
    chroot      /var/lib/haproxy
    pidfile     /run/haproxy.pid          #当前进程id文件
    #user haproxy
    #group haproxy
    daemon
    # turn on stats unix socket
    stats       socket /var/lib/haproxy/stats
defaults
    log     global          #应用全局的日志配置
    mode    http            #默认的模式mode { tcp|http|health }，tcp是4层，http是7层，health只会返回OK
    #option  httplog
    option  dontlognull
    option  redispatch      #当serverId对应的服务器挂掉后，强制定向到其他健康的服务器
    option  abortonclose    #当服务器负载很高时，自动结束掉当前队列中处理比较久的链接
    retries 3
    maxconn         2000
    timeout http-request    10s     #默认http请求超时时间                 
    timeout queue           1m      #默认队列超时时间              
    timeout connect         10s     #默认连接超时时间                  
    timeout client          1m      #默认客户端超时时间                   
    timeout server          1m      #默认服务器端超时时间                   
    timeout http-keep-alive 10s     #默认持久连接超时时间                  
    timeout check           10s     #心跳检测超时 
    balance roundrobin              #轮叫调度算法
######## Nginx cluster load balance #################
listen nginx                        #配置负载均衡，名字任意
    bind 0.0.0.0:80                 #注意端口号要不低于1024,避免端口冲突
    mode tcp
    maxconn 4086
    #log 127.0.0.1 local0 debug
    #check inter 1500是检测心跳频率rise 2是2次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重
    server web1 172.26.18.249:80 check inter 1500 rise 2 fall 3 weight 2 
    server web2 172.26.18.248:80 check inter 1500 rise 2 fall 3 weight 4 
########统计页面配置########
listen admin_stats
    bind 0.0.0.0:1080 #监听端口
    mode http #http的7层模式
    option httplog #采用http日志格式
    #log 127.0.0.1 local0 err
    maxconn 10
    stats refresh 30s #统计页面自动刷新时间
    stats uri /stats #统计页面url
    stats realm XingCloud\Haproxy #统计页面密码框上提示文本
    stats auth hjj:hjj #统计页面用户名和密码设置
    stats hide-version #隐藏统计页面上HAProxy的版本信息
    stats admin if TRUE  #手工启用/禁用后端服务器


    #roundrobin: 轮叫调度算法，可以通过定义权值来分配后端服务器
    #static-rr：静态的基于权重的轮叫调度算法
    #source：源IP地址哈希算法，按请求访问的IP地址进行hash运算，将来自用一个IP地址的访问固定到同一台后端服务器
    #uri：URI哈希算法，按请求访问的URI进行hash运算，将请求转发到匹配的后端服务器
    #uri_param：根据访问的URL路径中的参数选择后端服务器
    #leastconn：最少连接调度算法，将连接请求转发到最少连接数目的后端服务器
    #hdr(name)：表示根据HTTP请求头进行转发
    #cookie：表示根据定义的SERVERID转发请求